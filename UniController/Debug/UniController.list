
UniController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002858  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b14  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004478  08004478  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004478  08004478  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004478  08004478  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000010  08004490  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08004490  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ca9  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f9  00000000  00000000  00027ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  000296e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00029e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f99  00000000  00000000  0002a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088d4  00000000  00000000  000414a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e403  00000000  00000000  00049d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8180  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c1c  00000000  00000000  000c81d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000128  00000000  00000000  000c9df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800294c 	.word	0x0800294c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800294c 	.word	0x0800294c

0800014c <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b08d      	sub	sp, #52	; 0x34
 8000150:	af02      	add	r7, sp, #8
 8000152:	60b9      	str	r1, [r7, #8]
 8000154:	4611      	mov	r1, r2
 8000156:	461a      	mov	r2, r3
 8000158:	4603      	mov	r3, r0
 800015a:	73fb      	strb	r3, [r7, #15]
 800015c:	460b      	mov	r3, r1
 800015e:	81bb      	strh	r3, [r7, #12]
 8000160:	4613      	mov	r3, r2
 8000162:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	2b1e      	cmp	r3, #30
 8000168:	d961      	bls.n	800022e <ILI9341_DrawChar+0xe2>
 800016a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800016e:	2b00      	cmp	r3, #0
 8000170:	db5d      	blt.n	800022e <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000178:	68bb      	ldr	r3, [r7, #8]
 800017a:	785b      	ldrb	r3, [r3, #1]
 800017c:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 800017e:	68bb      	ldr	r3, [r7, #8]
 8000180:	789b      	ldrb	r3, [r3, #2]
 8000182:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	78db      	ldrb	r3, [r3, #3]
 8000188:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800018a:	7bfb      	ldrb	r3, [r7, #15]
 800018c:	3b20      	subs	r3, #32
 800018e:	7ffa      	ldrb	r2, [r7, #31]
 8000190:	fb02 f303 	mul.w	r3, r2, r3
 8000194:	3304      	adds	r3, #4
 8000196:	68ba      	ldr	r2, [r7, #8]
 8000198:	4413      	add	r3, r2
 800019a:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800019c:	7fbb      	ldrb	r3, [r7, #30]
 800019e:	b29a      	uxth	r2, r3
 80001a0:	7f7b      	ldrb	r3, [r7, #29]
 80001a2:	b29c      	uxth	r4, r3
 80001a4:	88f9      	ldrh	r1, [r7, #6]
 80001a6:	89b8      	ldrh	r0, [r7, #12]
 80001a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	4623      	mov	r3, r4
 80001ae:	f000 fc19 	bl	80009e4 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80001b2:	2300      	movs	r3, #0
 80001b4:	627b      	str	r3, [r7, #36]	; 0x24
 80001b6:	e035      	b.n	8000224 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 80001b8:	2300      	movs	r3, #0
 80001ba:	623b      	str	r3, [r7, #32]
 80001bc:	e02b      	b.n	8000216 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80001be:	7f3b      	ldrb	r3, [r7, #28]
 80001c0:	6a3a      	ldr	r2, [r7, #32]
 80001c2:	fb02 f203 	mul.w	r2, r2, r3
 80001c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c8:	10db      	asrs	r3, r3, #3
 80001ca:	f003 031f 	and.w	r3, r3, #31
 80001ce:	4413      	add	r3, r2
 80001d0:	3301      	adds	r3, #1
 80001d2:	69ba      	ldr	r2, [r7, #24]
 80001d4:	4413      	add	r3, r2
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80001da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001dc:	f003 0307 	and.w	r3, r3, #7
 80001e0:	2201      	movs	r2, #1
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80001e8:	7dfa      	ldrb	r2, [r7, #23]
 80001ea:	7dbb      	ldrb	r3, [r7, #22]
 80001ec:	4013      	ands	r3, r2
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d00d      	beq.n	8000210 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80001f4:	6a3b      	ldr	r3, [r7, #32]
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	89bb      	ldrh	r3, [r7, #12]
 80001fa:	4413      	add	r3, r2
 80001fc:	b298      	uxth	r0, r3
 80001fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000200:	b29a      	uxth	r2, r3
 8000202:	88fb      	ldrh	r3, [r7, #6]
 8000204:	4413      	add	r3, r2
 8000206:	b29b      	uxth	r3, r3
 8000208:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800020a:	4619      	mov	r1, r3
 800020c:	f000 fb84 	bl	8000918 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000210:	6a3b      	ldr	r3, [r7, #32]
 8000212:	3301      	adds	r3, #1
 8000214:	623b      	str	r3, [r7, #32]
 8000216:	7fbb      	ldrb	r3, [r7, #30]
 8000218:	6a3a      	ldr	r2, [r7, #32]
 800021a:	429a      	cmp	r2, r3
 800021c:	dbcf      	blt.n	80001be <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 800021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000220:	3301      	adds	r3, #1
 8000222:	627b      	str	r3, [r7, #36]	; 0x24
 8000224:	7f7b      	ldrb	r3, [r7, #29]
 8000226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000228:	429a      	cmp	r2, r3
 800022a:	dbc5      	blt.n	80001b8 <ILI9341_DrawChar+0x6c>
 800022c:	e000      	b.n	8000230 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 800022e:	bf00      	nop
			}
		}
	}
}
 8000230:	372c      	adds	r7, #44	; 0x2c
 8000232:	46bd      	mov	sp, r7
 8000234:	bd90      	pop	{r4, r7, pc}

08000236 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	b08a      	sub	sp, #40	; 0x28
 800023a:	af02      	add	r7, sp, #8
 800023c:	60f8      	str	r0, [r7, #12]
 800023e:	60b9      	str	r1, [r7, #8]
 8000240:	4611      	mov	r1, r2
 8000242:	461a      	mov	r2, r3
 8000244:	460b      	mov	r3, r1
 8000246:	80fb      	strh	r3, [r7, #6]
 8000248:	4613      	mov	r3, r2
 800024a:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	785b      	ldrb	r3, [r3, #1]
 8000256:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000258:	e02d      	b.n	80002b6 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	7818      	ldrb	r0, [r3, #0]
 800025e:	88b9      	ldrh	r1, [r7, #4]
 8000260:	88fa      	ldrh	r2, [r7, #6]
 8000262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	f7ff ff6d 	bl	800014c <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	3b20      	subs	r3, #32
 8000278:	7ffa      	ldrb	r2, [r7, #31]
 800027a:	fb02 f303 	mul.w	r3, r2, r3
 800027e:	3304      	adds	r3, #4
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	4413      	add	r3, r2
 8000284:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000286:	69bb      	ldr	r3, [r7, #24]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800028c:	7dfb      	ldrb	r3, [r7, #23]
 800028e:	1c9a      	adds	r2, r3, #2
 8000290:	7fbb      	ldrb	r3, [r7, #30]
 8000292:	429a      	cmp	r2, r3
 8000294:	da07      	bge.n	80002a6 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000296:	7dfb      	ldrb	r3, [r7, #23]
 8000298:	b29a      	uxth	r2, r3
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	4413      	add	r3, r2
 800029e:	b29b      	uxth	r3, r3
 80002a0:	3302      	adds	r3, #2
 80002a2:	80fb      	strh	r3, [r7, #6]
 80002a4:	e004      	b.n	80002b0 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80002a6:	7fbb      	ldrb	r3, [r7, #30]
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	4413      	add	r3, r2
 80002ae:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	3301      	adds	r3, #1
 80002b4:	60fb      	str	r3, [r7, #12]
	while (*str)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1cd      	bne.n	800025a <ILI9341_DrawText+0x24>
	}
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a06      	ldr	r2, [pc, #24]	; (80002ec <HAL_SPI_TxCpltCallback+0x24>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d105      	bne.n	80002e4 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002de:	4804      	ldr	r0, [pc, #16]	; (80002f0 <HAL_SPI_TxCpltCallback+0x28>)
 80002e0:	f001 fb60 	bl	80019a4 <HAL_GPIO_WritePin>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	2000002c 	.word	0x2000002c
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80002fe:	bf00      	nop
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <ILI9341_SPI_Tx+0x30>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b02      	cmp	r3, #2
 800030c:	d1f8      	bne.n	8000300 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800030e:	1dfb      	adds	r3, r7, #7
 8000310:	2201      	movs	r2, #1
 8000312:	4619      	mov	r1, r3
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <ILI9341_SPI_Tx+0x30>)
 8000316:	f002 f905 	bl	8002524 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	2000002c 	.word	0x2000002c

08000328 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000334:	bf00      	nop
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <ILI9341_SPI_TxBuffer+0x30>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f003 0302 	and.w	r3, r3, #2
 8000340:	2b02      	cmp	r3, #2
 8000342:	d1f8      	bne.n	8000336 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000344:	887b      	ldrh	r3, [r7, #2]
 8000346:	461a      	mov	r2, r3
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	4803      	ldr	r0, [pc, #12]	; (8000358 <ILI9341_SPI_TxBuffer+0x30>)
 800034c:	f002 f8ea 	bl	8002524 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000002c 	.word	0x2000002c

0800035c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	4808      	ldr	r0, [pc, #32]	; (800038c <ILI9341_WriteCommand+0x30>)
 800036c:	f001 fb1a 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <ILI9341_WriteCommand+0x30>)
 8000378:	f001 fb14 	bl	80019a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ffb8 	bl	80002f4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40010c00 	.word	0x40010c00

08000390 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800039a:	2201      	movs	r2, #1
 800039c:	2101      	movs	r1, #1
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <ILI9341_WriteData+0x30>)
 80003a0:	f001 fb00 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <ILI9341_WriteData+0x30>)
 80003ac:	f001 fafa 	bl	80019a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff9e 	bl	80002f4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80003d0:	2201      	movs	r2, #1
 80003d2:	2101      	movs	r1, #1
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <ILI9341_WriteBuffer+0x34>)
 80003d6:	f001 fae5 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <ILI9341_WriteBuffer+0x34>)
 80003e2:	f001 fadf 	bl	80019a4 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	4619      	mov	r1, r3
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f7ff ff9c 	bl	8000328 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010c00 	.word	0x40010c00

080003fc <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4604      	mov	r4, r0
 8000404:	4608      	mov	r0, r1
 8000406:	4611      	mov	r1, r2
 8000408:	461a      	mov	r2, r3
 800040a:	4623      	mov	r3, r4
 800040c:	80fb      	strh	r3, [r7, #6]
 800040e:	4603      	mov	r3, r0
 8000410:	80bb      	strh	r3, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
 8000416:	4613      	mov	r3, r2
 8000418:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	0a1b      	lsrs	r3, r3, #8
 800041e:	b29b      	uxth	r3, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000424:	88fb      	ldrh	r3, [r7, #6]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800042a:	887b      	ldrh	r3, [r7, #2]
 800042c:	0a1b      	lsrs	r3, r3, #8
 800042e:	b29b      	uxth	r3, r3
 8000430:	b2db      	uxtb	r3, r3
 8000432:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000434:	887b      	ldrh	r3, [r7, #2]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800043a:	202a      	movs	r0, #42	; 0x2a
 800043c:	f7ff ff8e 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	2104      	movs	r1, #4
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ffbc 	bl	80003c4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 800044c:	88bb      	ldrh	r3, [r7, #4]
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000456:	88bb      	ldrh	r3, [r7, #4]
 8000458:	b2db      	uxtb	r3, r3
 800045a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 800045c:	883b      	ldrh	r3, [r7, #0]
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	b29b      	uxth	r3, r3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000466:	883b      	ldrh	r3, [r7, #0]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 800046c:	202b      	movs	r0, #43	; 0x2b
 800046e:	f7ff ff75 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	2104      	movs	r1, #4
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ffa3 	bl	80003c4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800047e:	202c      	movs	r0, #44	; 0x2c
 8000480:	f7ff ff6c 	bl	800035c <ILI9341_WriteCommand>
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bd90      	pop	{r4, r7, pc}

0800048c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000490:	2200      	movs	r2, #0
 8000492:	2102      	movs	r1, #2
 8000494:	480d      	ldr	r0, [pc, #52]	; (80004cc <ILI9341_Reset+0x40>)
 8000496:	f001 fa85 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800049a:	200a      	movs	r0, #10
 800049c:	f000 fdde 	bl	800105c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a6:	4809      	ldr	r0, [pc, #36]	; (80004cc <ILI9341_Reset+0x40>)
 80004a8:	f001 fa7c 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f000 fdd5 	bl	800105c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80004b2:	2201      	movs	r2, #1
 80004b4:	2102      	movs	r1, #2
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <ILI9341_Reset+0x40>)
 80004b8:	f001 fa74 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c2:	4802      	ldr	r0, [pc, #8]	; (80004cc <ILI9341_Reset+0x40>)
 80004c4:	f001 fa6e 	bl	80019a4 <HAL_GPIO_WritePin>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40010c00 	.word	0x40010c00

080004d0 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80004d4:	2201      	movs	r2, #1
 80004d6:	2102      	movs	r1, #2
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <ILI9341_Enable+0x14>)
 80004da:	f001 fa63 	bl	80019a4 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80004ec:	f7ff fff0 	bl	80004d0 <ILI9341_Enable>
	ILI9341_Reset();
 80004f0:	f7ff ffcc 	bl	800048c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff ff31 	bl	800035c <ILI9341_WriteCommand>
	HAL_Delay(10);
 80004fa:	200a      	movs	r0, #10
 80004fc:	f000 fdae 	bl	800105c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000500:	20cb      	movs	r0, #203	; 0xcb
 8000502:	f7ff ff2b 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000506:	2039      	movs	r0, #57	; 0x39
 8000508:	f7ff ff42 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800050c:	202c      	movs	r0, #44	; 0x2c
 800050e:	f7ff ff3f 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ff3c 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000518:	2034      	movs	r0, #52	; 0x34
 800051a:	f7ff ff39 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800051e:	2002      	movs	r0, #2
 8000520:	f7ff ff36 	bl	8000390 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000524:	20cf      	movs	r0, #207	; 0xcf
 8000526:	f7ff ff19 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ff30 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000530:	20c1      	movs	r0, #193	; 0xc1
 8000532:	f7ff ff2d 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000536:	2030      	movs	r0, #48	; 0x30
 8000538:	f7ff ff2a 	bl	8000390 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800053c:	20e8      	movs	r0, #232	; 0xe8
 800053e:	f7ff ff0d 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000542:	2085      	movs	r0, #133	; 0x85
 8000544:	f7ff ff24 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff ff21 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800054e:	2078      	movs	r0, #120	; 0x78
 8000550:	f7ff ff1e 	bl	8000390 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000554:	20ea      	movs	r0, #234	; 0xea
 8000556:	f7ff ff01 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ff18 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff ff15 	bl	8000390 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000566:	20ed      	movs	r0, #237	; 0xed
 8000568:	f7ff fef8 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800056c:	2064      	movs	r0, #100	; 0x64
 800056e:	f7ff ff0f 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000572:	2003      	movs	r0, #3
 8000574:	f7ff ff0c 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000578:	2012      	movs	r0, #18
 800057a:	f7ff ff09 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800057e:	2081      	movs	r0, #129	; 0x81
 8000580:	f7ff ff06 	bl	8000390 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000584:	20f7      	movs	r0, #247	; 0xf7
 8000586:	f7ff fee9 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800058a:	2020      	movs	r0, #32
 800058c:	f7ff ff00 	bl	8000390 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000590:	20c0      	movs	r0, #192	; 0xc0
 8000592:	f7ff fee3 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000596:	2023      	movs	r0, #35	; 0x23
 8000598:	f7ff fefa 	bl	8000390 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800059c:	20c1      	movs	r0, #193	; 0xc1
 800059e:	f7ff fedd 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80005a2:	2010      	movs	r0, #16
 80005a4:	f7ff fef4 	bl	8000390 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80005a8:	20c5      	movs	r0, #197	; 0xc5
 80005aa:	f7ff fed7 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80005ae:	203e      	movs	r0, #62	; 0x3e
 80005b0:	f7ff feee 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80005b4:	2028      	movs	r0, #40	; 0x28
 80005b6:	f7ff feeb 	bl	8000390 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80005ba:	20c7      	movs	r0, #199	; 0xc7
 80005bc:	f7ff fece 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80005c0:	2086      	movs	r0, #134	; 0x86
 80005c2:	f7ff fee5 	bl	8000390 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80005c6:	2036      	movs	r0, #54	; 0x36
 80005c8:	f7ff fec8 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80005cc:	2048      	movs	r0, #72	; 0x48
 80005ce:	f7ff fedf 	bl	8000390 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80005d2:	203a      	movs	r0, #58	; 0x3a
 80005d4:	f7ff fec2 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80005d8:	2055      	movs	r0, #85	; 0x55
 80005da:	f7ff fed9 	bl	8000390 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80005de:	20b1      	movs	r0, #177	; 0xb1
 80005e0:	f7ff febc 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff fed3 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80005ea:	2018      	movs	r0, #24
 80005ec:	f7ff fed0 	bl	8000390 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80005f0:	20b6      	movs	r0, #182	; 0xb6
 80005f2:	f7ff feb3 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80005f6:	2008      	movs	r0, #8
 80005f8:	f7ff feca 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80005fc:	2082      	movs	r0, #130	; 0x82
 80005fe:	f7ff fec7 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000602:	2027      	movs	r0, #39	; 0x27
 8000604:	f7ff fec4 	bl	8000390 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000608:	20f2      	movs	r0, #242	; 0xf2
 800060a:	f7ff fea7 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff febe 	bl	8000390 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000614:	2026      	movs	r0, #38	; 0x26
 8000616:	f7ff fea1 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff feb8 	bl	8000390 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000620:	20e0      	movs	r0, #224	; 0xe0
 8000622:	f7ff fe9b 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000626:	200f      	movs	r0, #15
 8000628:	f7ff feb2 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800062c:	2031      	movs	r0, #49	; 0x31
 800062e:	f7ff feaf 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000632:	202b      	movs	r0, #43	; 0x2b
 8000634:	f7ff feac 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000638:	200c      	movs	r0, #12
 800063a:	f7ff fea9 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800063e:	200e      	movs	r0, #14
 8000640:	f7ff fea6 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000644:	2008      	movs	r0, #8
 8000646:	f7ff fea3 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800064a:	204e      	movs	r0, #78	; 0x4e
 800064c:	f7ff fea0 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000650:	20f1      	movs	r0, #241	; 0xf1
 8000652:	f7ff fe9d 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000656:	2037      	movs	r0, #55	; 0x37
 8000658:	f7ff fe9a 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800065c:	2007      	movs	r0, #7
 800065e:	f7ff fe97 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000662:	2010      	movs	r0, #16
 8000664:	f7ff fe94 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000668:	2003      	movs	r0, #3
 800066a:	f7ff fe91 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800066e:	200e      	movs	r0, #14
 8000670:	f7ff fe8e 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff fe8b 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fe88 	bl	8000390 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000680:	20e1      	movs	r0, #225	; 0xe1
 8000682:	f7ff fe6b 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff fe82 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800068c:	200e      	movs	r0, #14
 800068e:	f7ff fe7f 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000692:	2014      	movs	r0, #20
 8000694:	f7ff fe7c 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000698:	2003      	movs	r0, #3
 800069a:	f7ff fe79 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800069e:	2011      	movs	r0, #17
 80006a0:	f7ff fe76 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80006a4:	2007      	movs	r0, #7
 80006a6:	f7ff fe73 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80006aa:	2031      	movs	r0, #49	; 0x31
 80006ac:	f7ff fe70 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80006b0:	20c1      	movs	r0, #193	; 0xc1
 80006b2:	f7ff fe6d 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80006b6:	2048      	movs	r0, #72	; 0x48
 80006b8:	f7ff fe6a 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80006bc:	2008      	movs	r0, #8
 80006be:	f7ff fe67 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f7ff fe64 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80006c8:	200c      	movs	r0, #12
 80006ca:	f7ff fe61 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80006ce:	2031      	movs	r0, #49	; 0x31
 80006d0:	f7ff fe5e 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80006d4:	2036      	movs	r0, #54	; 0x36
 80006d6:	f7ff fe5b 	bl	8000390 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80006da:	200f      	movs	r0, #15
 80006dc:	f7ff fe58 	bl	8000390 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80006e0:	2011      	movs	r0, #17
 80006e2:	f7ff fe3b 	bl	800035c <ILI9341_WriteCommand>
	HAL_Delay(100);
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f000 fcb8 	bl	800105c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80006ec:	2029      	movs	r0, #41	; 0x29
 80006ee:	f7ff fe35 	bl	800035c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f802 	bl	80006fc <ILI9341_SetRotation>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000706:	2036      	movs	r0, #54	; 0x36
 8000708:	f7ff fe28 	bl	800035c <ILI9341_WriteCommand>
	HAL_Delay(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 fca5 	bl	800105c <HAL_Delay>

	switch(rotation)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d837      	bhi.n	8000788 <ILI9341_SetRotation+0x8c>
 8000718:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <ILI9341_SetRotation+0x24>)
 800071a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071e:	bf00      	nop
 8000720:	08000731 	.word	0x08000731
 8000724:	08000747 	.word	0x08000747
 8000728:	0800075d 	.word	0x0800075d
 800072c:	08000773 	.word	0x08000773
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000730:	2048      	movs	r0, #72	; 0x48
 8000732:	f7ff fe2d 	bl	8000390 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <ILI9341_SetRotation+0x98>)
 8000738:	22f0      	movs	r2, #240	; 0xf0
 800073a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <ILI9341_SetRotation+0x9c>)
 800073e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000742:	801a      	strh	r2, [r3, #0]
		break;
 8000744:	e021      	b.n	800078a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000746:	2028      	movs	r0, #40	; 0x28
 8000748:	f7ff fe22 	bl	8000390 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <ILI9341_SetRotation+0x98>)
 800074e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000752:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <ILI9341_SetRotation+0x9c>)
 8000756:	22f0      	movs	r2, #240	; 0xf0
 8000758:	801a      	strh	r2, [r3, #0]
		break;
 800075a:	e016      	b.n	800078a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 800075c:	2088      	movs	r0, #136	; 0x88
 800075e:	f7ff fe17 	bl	8000390 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <ILI9341_SetRotation+0x98>)
 8000764:	22f0      	movs	r2, #240	; 0xf0
 8000766:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <ILI9341_SetRotation+0x9c>)
 800076a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800076e:	801a      	strh	r2, [r3, #0]
		break;
 8000770:	e00b      	b.n	800078a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000772:	20e8      	movs	r0, #232	; 0xe8
 8000774:	f7ff fe0c 	bl	8000390 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <ILI9341_SetRotation+0x98>)
 800077a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800077e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <ILI9341_SetRotation+0x9c>)
 8000782:	22f0      	movs	r2, #240	; 0xf0
 8000784:	801a      	strh	r2, [r3, #0]
		break;
 8000786:	e000      	b.n	800078a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000788:	bf00      	nop
	}
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000002 	.word	0x20000002
 8000798:	20000000 	.word	0x20000000

0800079c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800079c:	b5b0      	push	{r4, r5, r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	80fb      	strh	r3, [r7, #6]
 80007a8:	466b      	mov	r3, sp
 80007aa:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007b8:	d202      	bcs.n	80007c0 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	e002      	b.n	80007c6 <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80007c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2101      	movs	r1, #1
 80007ca:	483e      	ldr	r0, [pc, #248]	; (80008c4 <ILI9341_DrawColorBurst+0x128>)
 80007cc:	f001 f8ea 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	483b      	ldr	r0, [pc, #236]	; (80008c4 <ILI9341_DrawColorBurst+0x128>)
 80007d8:	f001 f8e4 	bl	80019a4 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 80007e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80007e8:	4623      	mov	r3, r4
 80007ea:	3b01      	subs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	4620      	mov	r0, r4
 80007f0:	f04f 0100 	mov.w	r1, #0
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	00cb      	lsls	r3, r1, #3
 80007fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000802:	00c2      	lsls	r2, r0, #3
 8000804:	4620      	mov	r0, r4
 8000806:	f04f 0100 	mov.w	r1, #0
 800080a:	f04f 0200 	mov.w	r2, #0
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	00cb      	lsls	r3, r1, #3
 8000814:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000818:	00c2      	lsls	r2, r0, #3
 800081a:	1de3      	adds	r3, r4, #7
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	ebad 0d03 	sub.w	sp, sp, r3
 8000824:	466b      	mov	r3, sp
 8000826:	3300      	adds	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
 800082e:	e00e      	b.n	800084e <ILI9341_DrawColorBurst+0xb2>
	{
		BurstBuffer[j] = chifted;
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000834:	4413      	add	r3, r2
 8000836:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800083a:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	3301      	adds	r3, #1
 8000840:	88fa      	ldrh	r2, [r7, #6]
 8000842:	b2d1      	uxtb	r1, r2
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	3302      	adds	r3, #2
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
 800084e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	429a      	cmp	r2, r3
 8000854:	d3ec      	bcc.n	8000830 <ILI9341_DrawColorBurst+0x94>
	}

	uint32_t SendingSize = size * 2;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	fbb2 f3f3 	udiv	r3, r2, r3
 8000864:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086a:	fbb3 f2f2 	udiv	r2, r3, r2
 800086e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000870:	fb01 f202 	mul.w	r2, r1, r2
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d010      	beq.n	80008a0 <ILI9341_DrawColorBurst+0x104>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800087e:	2300      	movs	r3, #0
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000882:	e009      	b.n	8000898 <ILI9341_DrawColorBurst+0xfc>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000884:	69b9      	ldr	r1, [r7, #24]
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	b29a      	uxth	r2, r3
 800088a:	230a      	movs	r3, #10
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <ILI9341_DrawColorBurst+0x12c>)
 800088e:	f001 fd0d 	bl	80022ac <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	3301      	adds	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d3f1      	bcc.n	8000884 <ILI9341_DrawColorBurst+0xe8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	230a      	movs	r3, #10
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <ILI9341_DrawColorBurst+0x12c>)
 80008aa:	f001 fcff 	bl	80022ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <ILI9341_DrawColorBurst+0x128>)
 80008b6:	f001 f875 	bl	80019a4 <HAL_GPIO_WritePin>
 80008ba:	46ad      	mov	sp, r5
}
 80008bc:	bf00      	nop
 80008be:	3730      	adds	r7, #48	; 0x30
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bdb0      	pop	{r4, r5, r7, pc}
 80008c4:	40010c00 	.word	0x40010c00
 80008c8:	2000002c 	.word	0x2000002c

080008cc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <ILI9341_FillScreen+0x44>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <ILI9341_FillScreen+0x48>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fd89 	bl	80003fc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <ILI9341_FillScreen+0x44>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <ILI9341_FillScreen+0x48>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	fb03 f302 	mul.w	r3, r3, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff4a 	bl	800079c <ILI9341_DrawColorBurst>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000002 	.word	0x20000002
 8000914:	20000000 	.word	0x20000000

08000918 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
 8000922:	460b      	mov	r3, r1
 8000924:	80bb      	strh	r3, [r7, #4]
 8000926:	4613      	mov	r3, r2
 8000928:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <ILI9341_DrawPixel+0xc4>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	88fa      	ldrh	r2, [r7, #6]
 8000932:	429a      	cmp	r2, r3
 8000934:	d24d      	bcs.n	80009d2 <ILI9341_DrawPixel+0xba>
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <ILI9341_DrawPixel+0xc8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	88ba      	ldrh	r2, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	d247      	bcs.n	80009d2 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	753b      	strb	r3, [r7, #20]
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	757b      	strb	r3, [r7, #21]
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	3301      	adds	r3, #1
 8000956:	121b      	asrs	r3, r3, #8
 8000958:	b2db      	uxtb	r3, r3
 800095a:	75bb      	strb	r3, [r7, #22]
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	3301      	adds	r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000966:	88bb      	ldrh	r3, [r7, #4]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	b29b      	uxth	r3, r3
 800096c:	b2db      	uxtb	r3, r3
 800096e:	743b      	strb	r3, [r7, #16]
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	747b      	strb	r3, [r7, #17]
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	121b      	asrs	r3, r3, #8
 800097c:	b2db      	uxtb	r3, r3
 800097e:	74bb      	strb	r3, [r7, #18]
 8000980:	88bb      	ldrh	r3, [r7, #4]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	3301      	adds	r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	b29b      	uxth	r3, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	733b      	strb	r3, [r7, #12]
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 800099a:	202a      	movs	r0, #42	; 0x2a
 800099c:	f7ff fcde 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2104      	movs	r1, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fd0c 	bl	80003c4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80009ac:	202b      	movs	r0, #43	; 0x2b
 80009ae:	f7ff fcd5 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2104      	movs	r1, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fd03 	bl	80003c4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80009be:	202c      	movs	r0, #44	; 0x2c
 80009c0:	f7ff fccc 	bl	800035c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2102      	movs	r1, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fcfa 	bl	80003c4 <ILI9341_WriteBuffer>
 80009d0:	e000      	b.n	80009d4 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80009d2:	bf00      	nop
}
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000002 	.word	0x20000002
 80009e0:	20000000 	.word	0x20000000

080009e4 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	4623      	mov	r3, r4
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	4603      	mov	r3, r0
 80009f8:	80bb      	strh	r3, [r7, #4]
 80009fa:	460b      	mov	r3, r1
 80009fc:	807b      	strh	r3, [r7, #2]
 80009fe:	4613      	mov	r3, r2
 8000a00:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <ILI9341_DrawRectangle+0xb0>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	88fa      	ldrh	r2, [r7, #6]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d23d      	bcs.n	8000a8a <ILI9341_DrawRectangle+0xa6>
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <ILI9341_DrawRectangle+0xb4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	88ba      	ldrh	r2, [r7, #4]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d237      	bcs.n	8000a8a <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000a1a:	88fa      	ldrh	r2, [r7, #6]
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <ILI9341_DrawRectangle+0xb0>)
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	b292      	uxth	r2, r2
 8000a26:	4293      	cmp	r3, r2
 8000a28:	dd05      	ble.n	8000a36 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <ILI9341_DrawRectangle+0xb0>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000a36:	88ba      	ldrh	r2, [r7, #4]
 8000a38:	883b      	ldrh	r3, [r7, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <ILI9341_DrawRectangle+0xb4>)
 8000a3e:	8812      	ldrh	r2, [r2, #0]
 8000a40:	b292      	uxth	r2, r2
 8000a42:	4293      	cmp	r3, r2
 8000a44:	dd05      	ble.n	8000a52 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <ILI9341_DrawRectangle+0xb4>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000a52:	88fa      	ldrh	r2, [r7, #6]
 8000a54:	887b      	ldrh	r3, [r7, #2]
 8000a56:	4413      	add	r3, r2
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b29c      	uxth	r4, r3
 8000a5e:	88ba      	ldrh	r2, [r7, #4]
 8000a60:	883b      	ldrh	r3, [r7, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	88b9      	ldrh	r1, [r7, #4]
 8000a6c:	88f8      	ldrh	r0, [r7, #6]
 8000a6e:	4622      	mov	r2, r4
 8000a70:	f7ff fcc4 	bl	80003fc <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000a74:	883b      	ldrh	r3, [r7, #0]
 8000a76:	887a      	ldrh	r2, [r7, #2]
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	8b3b      	ldrh	r3, [r7, #24]
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe8a 	bl	800079c <ILI9341_DrawColorBurst>
 8000a88:	e000      	b.n	8000a8c <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000a8a:	bf00      	nop
}
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd90      	pop	{r4, r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000002 	.word	0x20000002
 8000a98:	20000000 	.word	0x20000000

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	9404      	str	r4, [sp, #16]
 8000aa4:	9405      	str	r4, [sp, #20]
 8000aa6:	9406      	str	r4, [sp, #24]
 8000aa8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <MX_GPIO_Init+0xc4>)
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	f042 0210 	orr.w	r2, r2, #16
 8000ab2:	619a      	str	r2, [r3, #24]
 8000ab4:	699a      	ldr	r2, [r3, #24]
 8000ab6:	f002 0210 	and.w	r2, r2, #16
 8000aba:	9200      	str	r2, [sp, #0]
 8000abc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	699a      	ldr	r2, [r3, #24]
 8000ac0:	f042 0220 	orr.w	r2, r2, #32
 8000ac4:	619a      	str	r2, [r3, #24]
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	f002 0220 	and.w	r2, r2, #32
 8000acc:	9201      	str	r2, [sp, #4]
 8000ace:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	f042 0204 	orr.w	r2, r2, #4
 8000ad6:	619a      	str	r2, [r3, #24]
 8000ad8:	699a      	ldr	r2, [r3, #24]
 8000ada:	f002 0204 	and.w	r2, r2, #4
 8000ade:	9202      	str	r2, [sp, #8]
 8000ae0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	699a      	ldr	r2, [r3, #24]
 8000ae4:	f042 0208 	orr.w	r2, r2, #8
 8000ae8:	619a      	str	r2, [r3, #24]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	9303      	str	r3, [sp, #12]
 8000af2:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000af4:	4d1b      	ldr	r5, [pc, #108]	; (8000b64 <MX_GPIO_Init+0xc8>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	2108      	movs	r1, #8
 8000afa:	4628      	mov	r0, r5
 8000afc:	f000 ff52 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b00:	4e19      	ldr	r6, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xcc>)
 8000b02:	4622      	mov	r2, r4
 8000b04:	f240 4103 	movw	r1, #1027	; 0x403
 8000b08:	4630      	mov	r0, r6
 8000b0a:	f000 ff4b 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b12:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	a904      	add	r1, sp, #16
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <MX_GPIO_Init+0xd0>)
 8000b1c:	f000 fdbe 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8000b20:	2343      	movs	r3, #67	; 0x43
 8000b22:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	a904      	add	r1, sp, #16
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f000 fdb6 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b30:	2308      	movs	r3, #8
 8000b32:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2701      	movs	r7, #1
 8000b36:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	a904      	add	r1, sp, #16
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 fdab 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8000b46:	f240 4303 	movw	r3, #1027	; 0x403
 8000b4a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	a904      	add	r1, sp, #16
 8000b56:	4630      	mov	r0, r6
 8000b58:	f000 fda0 	bl	800169c <HAL_GPIO_Init>

}
 8000b5c:	b009      	add	sp, #36	; 0x24
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010800 	.word	0x40010800
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40011000 	.word	0x40011000

08000b70 <MX_DMA_Init>:
{
 8000b70:	b500      	push	{lr}
 8000b72:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_DMA_Init+0x30>)
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	f042 0201 	orr.w	r2, r2, #1
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	200d      	movs	r0, #13
 8000b8e:	f000 fb60 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b92:	200d      	movs	r0, #13
 8000b94:	f000 fb79 	bl	800128a <HAL_NVIC_EnableIRQ>
}
 8000b98:	b003      	add	sp, #12
 8000b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <screen_draw_helper>:
	screen_draw_helper(L10N_BUT_BACK, L10N_BUT_LESS, L10N_BUT_NEXT, L10N_BUT_PREV, L10N_BUT_STAT, L10N_BUT_MORE);
	screen_draw_statusbar(0);
}

void screen_draw_helper(char* txt_b1, char* txt_b2, char* txt_b3, char* txt_b4, char* txt_b5, char* txt_b6)
{
 8000ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	4689      	mov	r9, r1
 8000bac:	4690      	mov	r8, r2
 8000bae:	461f      	mov	r7, r3
	ILI9341_DrawText(txt_b1, FONT_HELPER, 1, 200, COL_TXT_HELPER, COL_BG_HELPER);
 8000bb0:	4c1b      	ldr	r4, [pc, #108]	; (8000c20 <screen_draw_helper+0x7c>)
 8000bb2:	f64f 76e0 	movw	r6, #65504	; 0xffe0
 8000bb6:	9601      	str	r6, [sp, #4]
 8000bb8:	2500      	movs	r5, #0
 8000bba:	9500      	str	r5, [sp, #0]
 8000bbc:	23c8      	movs	r3, #200	; 0xc8
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	f7ff fb38 	bl	8000236 <ILI9341_DrawText>
	ILI9341_DrawText(txt_b2, FONT_HELPER, 1, 220, COL_TXT_HELPER, COL_BG_HELPER);
 8000bc6:	9601      	str	r6, [sp, #4]
 8000bc8:	9500      	str	r5, [sp, #0]
 8000bca:	23dc      	movs	r3, #220	; 0xdc
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4621      	mov	r1, r4
 8000bd0:	4648      	mov	r0, r9
 8000bd2:	f7ff fb30 	bl	8000236 <ILI9341_DrawText>
	ILI9341_DrawText(txt_b3, FONT_HELPER, 140, 200, COL_TXT_HELPER, COL_BG_HELPER);
 8000bd6:	9601      	str	r6, [sp, #4]
 8000bd8:	9500      	str	r5, [sp, #0]
 8000bda:	23c8      	movs	r3, #200	; 0xc8
 8000bdc:	228c      	movs	r2, #140	; 0x8c
 8000bde:	4621      	mov	r1, r4
 8000be0:	4640      	mov	r0, r8
 8000be2:	f7ff fb28 	bl	8000236 <ILI9341_DrawText>
	ILI9341_DrawText(txt_b4, FONT_HELPER, 140, 220, COL_TXT_HELPER, COL_BG_HELPER);
 8000be6:	9601      	str	r6, [sp, #4]
 8000be8:	9500      	str	r5, [sp, #0]
 8000bea:	23dc      	movs	r3, #220	; 0xdc
 8000bec:	228c      	movs	r2, #140	; 0x8c
 8000bee:	4621      	mov	r1, r4
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	f7ff fb20 	bl	8000236 <ILI9341_DrawText>
	ILI9341_DrawText(txt_b5, FONT_HELPER, 270, 200, COL_TXT_HELPER, COL_BG_HELPER);
 8000bf6:	9601      	str	r6, [sp, #4]
 8000bf8:	9500      	str	r5, [sp, #0]
 8000bfa:	23c8      	movs	r3, #200	; 0xc8
 8000bfc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000c00:	4621      	mov	r1, r4
 8000c02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000c04:	f7ff fb17 	bl	8000236 <ILI9341_DrawText>
	ILI9341_DrawText(txt_b6, FONT_HELPER, 270, 220, COL_TXT_HELPER, COL_BG_HELPER);
 8000c08:	9601      	str	r6, [sp, #4]
 8000c0a:	9500      	str	r5, [sp, #0]
 8000c0c:	23dc      	movs	r3, #220	; 0xdc
 8000c0e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000c12:	4621      	mov	r1, r4
 8000c14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000c16:	f7ff fb0e 	bl	8000236 <ILI9341_DrawText>

}
 8000c1a:	b003      	add	sp, #12
 8000c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c20:	08002974 	.word	0x08002974

08000c24 <screen_draw>:
{
 8000c24:	b510      	push	{r4, lr}
 8000c26:	b082      	sub	sp, #8
	ILI9341_DrawRectangle(0, 0, 320, 240, COL_BG_PAGE);
 8000c28:	f24c 6418 	movw	r4, #50712	; 0xc618
 8000c2c:	9400      	str	r4, [sp, #0]
 8000c2e:	23f0      	movs	r3, #240	; 0xf0
 8000c30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	f7ff fed4 	bl	80009e4 <ILI9341_DrawRectangle>
	ILI9341_DrawText(L10N_PAG_HW, FONT4, 90, 110, COL_TXT_PAGE, COL_BG_PAGE);
 8000c3c:	9401      	str	r4, [sp, #4]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	236e      	movs	r3, #110	; 0x6e
 8000c44:	225a      	movs	r2, #90	; 0x5a
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <screen_draw+0x44>)
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <screen_draw+0x48>)
 8000c4a:	f7ff faf4 	bl	8000236 <ILI9341_DrawText>
	screen_draw_helper(L10N_BUT_BACK, L10N_BUT_LESS, L10N_BUT_NEXT, L10N_BUT_PREV, L10N_BUT_STAT, L10N_BUT_MORE);
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <screen_draw+0x4c>)
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <screen_draw+0x50>)
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <screen_draw+0x54>)
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <screen_draw+0x58>)
 8000c5a:	4909      	ldr	r1, [pc, #36]	; (8000c80 <screen_draw+0x5c>)
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <screen_draw+0x60>)
 8000c5e:	f7ff ffa1 	bl	8000ba4 <screen_draw_helper>
}
 8000c62:	b002      	add	sp, #8
 8000c64:	bd10      	pop	{r4, pc}
 8000c66:	bf00      	nop
 8000c68:	080032d8 	.word	0x080032d8
 8000c6c:	0800441c 	.word	0x0800441c
 8000c70:	0800444c 	.word	0x0800444c
 8000c74:	08004454 	.word	0x08004454
 8000c78:	0800442c 	.word	0x0800442c
 8000c7c:	08004434 	.word	0x08004434
 8000c80:	0800443c 	.word	0x0800443c
 8000c84:	08004444 	.word	0x08004444

08000c88 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <Error_Handler+0x2>

08000c8c <MX_SPI1_Init>:
{
 8000c8c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <MX_SPI1_Init+0x3c>)
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_SPI1_Init+0x40>)
 8000c92:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c94:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c98:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c9e:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cac:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cae:	2208      	movs	r2, #8
 8000cb0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cb8:	230a      	movs	r3, #10
 8000cba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cbc:	f001 fa72 	bl	80021a4 <HAL_SPI_Init>
 8000cc0:	b900      	cbnz	r0, 8000cc4 <MX_SPI1_Init+0x38>
}
 8000cc2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cc4:	f7ff ffe0 	bl	8000c88 <Error_Handler>
 8000cc8:	2000002c 	.word	0x2000002c
 8000ccc:	40013000 	.word	0x40013000

08000cd0 <SystemClock_Config>:
{
 8000cd0:	b500      	push	{lr}
 8000cd2:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8000cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cda:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	9303      	str	r3, [sp, #12]
 8000ce2:	9304      	str	r3, [sp, #16]
 8000ce4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cee:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cf0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf2:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cfe:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	a806      	add	r0, sp, #24
 8000d02:	f000 fe67 	bl	80019d4 <HAL_RCC_OscConfig>
 8000d06:	b980      	cbnz	r0, 8000d2a <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d08:	230f      	movs	r3, #15
 8000d0a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d18:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1c:	a801      	add	r0, sp, #4
 8000d1e:	f001 f8d9 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000d22:	b920      	cbnz	r0, 8000d2e <SystemClock_Config+0x5e>
}
 8000d24:	b011      	add	sp, #68	; 0x44
 8000d26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d2a:	f7ff ffad 	bl	8000c88 <Error_Handler>
    Error_Handler();
 8000d2e:	f7ff ffab 	bl	8000c88 <Error_Handler>
	...

08000d34 <main>:
{
 8000d34:	b500      	push	{lr}
 8000d36:	b083      	sub	sp, #12
  HAL_Init();
 8000d38:	f000 f92e 	bl	8000f98 <HAL_Init>
  SystemClock_Config();
 8000d3c:	f7ff ffc8 	bl	8000cd0 <SystemClock_Config>
  MX_GPIO_Init();
 8000d40:	f7ff feac 	bl	8000a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d44:	f7ff ff14 	bl	8000b70 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d48:	f7ff ffa0 	bl	8000c8c <MX_SPI1_Init>
  ILI9341_Init();
 8000d4c:	f7ff fbcc 	bl	80004e8 <ILI9341_Init>
  ILI9341_FillScreen(BLACK);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fdbb 	bl	80008cc <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f7ff fcd0 	bl	80006fc <ILI9341_SetRotation>
  ILI9341_DrawText("STARTING...", FONT4, 90, 110, BLACK, WHITE);
 8000d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	2300      	movs	r3, #0
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	236e      	movs	r3, #110	; 0x6e
 8000d68:	225a      	movs	r2, #90	; 0x5a
 8000d6a:	4906      	ldr	r1, [pc, #24]	; (8000d84 <main+0x50>)
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <main+0x54>)
 8000d6e:	f7ff fa62 	bl	8000236 <ILI9341_DrawText>
  HAL_Delay(1000);
 8000d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d76:	f000 f971 	bl	800105c <HAL_Delay>
	  screen_draw(0);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff ff52 	bl	8000c24 <screen_draw>
  while (1)
 8000d80:	e7fb      	b.n	8000d7a <main+0x46>
 8000d82:	bf00      	nop
 8000d84:	080032d8 	.word	0x080032d8
 8000d88:	0800445c 	.word	0x0800445c

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_MspInit+0x60>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_MspInit+0x60>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000

08000df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <HAL_SPI_MspInit+0xd8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d156      	bne.n	8000ebe <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e40:	2320      	movs	r3, #32
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	481f      	ldr	r0, [pc, #124]	; (8000ed0 <HAL_SPI_MspInit+0xe0>)
 8000e54:	f000 fc22 	bl	800169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4819      	ldr	r0, [pc, #100]	; (8000ed0 <HAL_SPI_MspInit+0xe0>)
 8000e6c:	f000 fc16 	bl	800169c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <HAL_SPI_MspInit+0xe8>)
 8000e74:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e78:	2210      	movs	r2, #16
 8000e7a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000ea4:	f000 fa0c 	bl	80012c0 <HAL_DMA_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000eae:	f7ff feeb 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000eb6:	649a      	str	r2, [r3, #72]	; 0x48
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_SPI_MspInit+0xe4>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	20000084 	.word	0x20000084
 8000ed8:	40020030 	.word	0x40020030

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f22:	f000 f87f 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DMA1_Channel3_IRQHandler+0x10>)
 8000f32:	f000 fa7f 	bl	8001434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000084 	.word	0x20000084

08000f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f72:	f7ff ffe5 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f001 fcc5 	bl	8002904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff fedb 	bl	8000d34 <main>
  bx lr
 8000f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f88:	08004480 	.word	0x08004480
  ldr r2, =_sbss
 8000f8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f90:	200000cc 	.word	0x200000cc

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x28>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f947 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff feea 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f95f 	bl	80012a6 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f927 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000004 	.word	0x20000004
 800101c:	2000000c 	.word	0x2000000c
 8001020:	20000008 	.word	0x20000008

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x20>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	2000000c 	.word	0x2000000c
 8001044:	200000c8 	.word	0x200000c8

08001048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	200000c8 	.word	0x200000c8

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff fff0 	bl	8001048 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffe0 	bl	8001048 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000000c 	.word	0x2000000c

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4906      	ldr	r1, [pc, #24]	; (800113c <__NVIC_EnableIRQ+0x34>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff90 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff2d 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff42 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff90 	bl	8001194 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5f 	bl	8001140 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff35 	bl	8001108 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e043      	b.n	800135e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_DMA_Init+0xa8>)
 80012de:	4413      	add	r3, r2
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <HAL_DMA_Init+0xac>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	009a      	lsls	r2, r3, #2
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_DMA_Init+0xb0>)
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800130a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800130e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	bffdfff8 	.word	0xbffdfff8
 800136c:	cccccccd 	.word	0xcccccccd
 8001370:	40020000 	.word	0x40020000

08001374 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Start_IT+0x20>
 8001390:	2302      	movs	r3, #2
 8001392:	e04a      	b.n	800142a <HAL_DMA_Start_IT+0xb6>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d13a      	bne.n	800141c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 f938 	bl	8001640 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 020e 	orr.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e00f      	b.n	800140a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0204 	bic.w	r2, r2, #4
 80013f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 020a 	orr.w	r2, r2, #10
 8001408:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e005      	b.n	8001428 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001424:	2302      	movs	r3, #2
 8001426:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	2204      	movs	r2, #4
 8001452:	409a      	lsls	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d04f      	beq.n	80014fc <HAL_DMA_IRQHandler+0xc8>
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d04a      	beq.n	80014fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_DMA_IRQHandler+0x1f0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d029      	beq.n	80014e2 <HAL_DMA_IRQHandler+0xae>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_DMA_IRQHandler+0x1f4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d022      	beq.n	80014de <HAL_DMA_IRQHandler+0xaa>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_DMA_IRQHandler+0x1f8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01a      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xa4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a62      	ldr	r2, [pc, #392]	; (8001630 <HAL_DMA_IRQHandler+0x1fc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d012      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x9e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a60      	ldr	r2, [pc, #384]	; (8001634 <HAL_DMA_IRQHandler+0x200>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00a      	beq.n	80014cc <HAL_DMA_IRQHandler+0x98>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a5f      	ldr	r2, [pc, #380]	; (8001638 <HAL_DMA_IRQHandler+0x204>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d102      	bne.n	80014c6 <HAL_DMA_IRQHandler+0x92>
 80014c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c4:	e00e      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014ca:	e00b      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014d0:	e008      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d6:	e005      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014dc:	e002      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	e000      	b.n	80014e4 <HAL_DMA_IRQHandler+0xb0>
 80014e2:	2304      	movs	r3, #4
 80014e4:	4a55      	ldr	r2, [pc, #340]	; (800163c <HAL_DMA_IRQHandler+0x208>)
 80014e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8094 	beq.w	800161a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014fa:	e08e      	b.n	800161a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2202      	movs	r2, #2
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d056      	beq.n	80015ba <HAL_DMA_IRQHandler+0x186>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d051      	beq.n	80015ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10b      	bne.n	800153c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 020a 	bic.w	r2, r2, #10
 8001532:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a38      	ldr	r2, [pc, #224]	; (8001624 <HAL_DMA_IRQHandler+0x1f0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d029      	beq.n	800159a <HAL_DMA_IRQHandler+0x166>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a37      	ldr	r2, [pc, #220]	; (8001628 <HAL_DMA_IRQHandler+0x1f4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d022      	beq.n	8001596 <HAL_DMA_IRQHandler+0x162>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a35      	ldr	r2, [pc, #212]	; (800162c <HAL_DMA_IRQHandler+0x1f8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01a      	beq.n	8001590 <HAL_DMA_IRQHandler+0x15c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a34      	ldr	r2, [pc, #208]	; (8001630 <HAL_DMA_IRQHandler+0x1fc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d012      	beq.n	800158a <HAL_DMA_IRQHandler+0x156>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a32      	ldr	r2, [pc, #200]	; (8001634 <HAL_DMA_IRQHandler+0x200>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00a      	beq.n	8001584 <HAL_DMA_IRQHandler+0x150>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_DMA_IRQHandler+0x204>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d102      	bne.n	800157e <HAL_DMA_IRQHandler+0x14a>
 8001578:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800157c:	e00e      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 800157e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001582:	e00b      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 8001584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001588:	e008      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	e005      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 8001590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001594:	e002      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 8001596:	2320      	movs	r3, #32
 8001598:	e000      	b.n	800159c <HAL_DMA_IRQHandler+0x168>
 800159a:	2302      	movs	r3, #2
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_DMA_IRQHandler+0x208>)
 800159e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d034      	beq.n	800161a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015b8:	e02f      	b.n	800161a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2208      	movs	r2, #8
 80015c0:	409a      	lsls	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d028      	beq.n	800161c <HAL_DMA_IRQHandler+0x1e8>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 020e 	bic.w	r2, r2, #14
 80015e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	2b00      	cmp	r3, #0
 8001610:	d004      	beq.n	800161c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
    }
  }
  return;
 800161a:	bf00      	nop
 800161c:	bf00      	nop
}
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40020008 	.word	0x40020008
 8001628:	4002001c 	.word	0x4002001c
 800162c:	40020030 	.word	0x40020030
 8001630:	40020044 	.word	0x40020044
 8001634:	40020058 	.word	0x40020058
 8001638:	4002006c 	.word	0x4002006c
 800163c:	40020000 	.word	0x40020000

08001640 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d108      	bne.n	8001680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800167e:	e007      	b.n	8001690 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b08b      	sub	sp, #44	; 0x2c
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e169      	b.n	8001984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b0:	2201      	movs	r2, #1
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8158 	bne.w	800197e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a9a      	ldr	r2, [pc, #616]	; (800193c <HAL_GPIO_Init+0x2a0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d05e      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016d8:	4a98      	ldr	r2, [pc, #608]	; (800193c <HAL_GPIO_Init+0x2a0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d875      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016de:	4a98      	ldr	r2, [pc, #608]	; (8001940 <HAL_GPIO_Init+0x2a4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d058      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016e4:	4a96      	ldr	r2, [pc, #600]	; (8001940 <HAL_GPIO_Init+0x2a4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d86f      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016ea:	4a96      	ldr	r2, [pc, #600]	; (8001944 <HAL_GPIO_Init+0x2a8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d052      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016f0:	4a94      	ldr	r2, [pc, #592]	; (8001944 <HAL_GPIO_Init+0x2a8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d869      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016f6:	4a94      	ldr	r2, [pc, #592]	; (8001948 <HAL_GPIO_Init+0x2ac>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d04c      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016fc:	4a92      	ldr	r2, [pc, #584]	; (8001948 <HAL_GPIO_Init+0x2ac>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d863      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001702:	4a92      	ldr	r2, [pc, #584]	; (800194c <HAL_GPIO_Init+0x2b0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d046      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 8001708:	4a90      	ldr	r2, [pc, #576]	; (800194c <HAL_GPIO_Init+0x2b0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d85d      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d82a      	bhi.n	8001768 <HAL_GPIO_Init+0xcc>
 8001712:	2b12      	cmp	r3, #18
 8001714:	d859      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <HAL_GPIO_Init+0x80>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001797 	.word	0x08001797
 8001720:	08001771 	.word	0x08001771
 8001724:	08001783 	.word	0x08001783
 8001728:	080017c5 	.word	0x080017c5
 800172c:	080017cb 	.word	0x080017cb
 8001730:	080017cb 	.word	0x080017cb
 8001734:	080017cb 	.word	0x080017cb
 8001738:	080017cb 	.word	0x080017cb
 800173c:	080017cb 	.word	0x080017cb
 8001740:	080017cb 	.word	0x080017cb
 8001744:	080017cb 	.word	0x080017cb
 8001748:	080017cb 	.word	0x080017cb
 800174c:	080017cb 	.word	0x080017cb
 8001750:	080017cb 	.word	0x080017cb
 8001754:	080017cb 	.word	0x080017cb
 8001758:	080017cb 	.word	0x080017cb
 800175c:	080017cb 	.word	0x080017cb
 8001760:	08001779 	.word	0x08001779
 8001764:	0800178d 	.word	0x0800178d
 8001768:	4a79      	ldr	r2, [pc, #484]	; (8001950 <HAL_GPIO_Init+0x2b4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800176e:	e02c      	b.n	80017ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e029      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	3304      	adds	r3, #4
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e024      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	3308      	adds	r3, #8
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e01f      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	330c      	adds	r3, #12
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e01a      	b.n	80017cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179e:	2304      	movs	r3, #4
 80017a0:	623b      	str	r3, [r7, #32]
          break;
 80017a2:	e013      	b.n	80017cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	611a      	str	r2, [r3, #16]
          break;
 80017b6:	e009      	b.n	80017cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	615a      	str	r2, [r3, #20]
          break;
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
          break;
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x130>
          break;
 80017ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2bff      	cmp	r3, #255	; 0xff
 80017d0:	d801      	bhi.n	80017d6 <HAL_GPIO_Init+0x13a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	e001      	b.n	80017da <HAL_GPIO_Init+0x13e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3304      	adds	r3, #4
 80017da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d802      	bhi.n	80017e8 <HAL_GPIO_Init+0x14c>
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x152>
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3b08      	subs	r3, #8
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	210f      	movs	r1, #15
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	6a39      	ldr	r1, [r7, #32]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80b1 	beq.w	800197e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001834:	4a48      	ldr	r2, [pc, #288]	; (8001958 <HAL_GPIO_Init+0x2bc>)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a40      	ldr	r2, [pc, #256]	; (800195c <HAL_GPIO_Init+0x2c0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a3e      	ldr	r2, [pc, #248]	; (8001964 <HAL_GPIO_Init+0x2c8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1e4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <HAL_GPIO_Init+0x2cc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1e0>
 8001878:	2303      	movs	r3, #3
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 800187c:	2304      	movs	r3, #4
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001888:	2300      	movs	r3, #0
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800189a:	492f      	ldr	r1, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x2bc>)
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	492c      	ldr	r1, [pc, #176]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4928      	ldr	r1, [pc, #160]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4922      	ldr	r1, [pc, #136]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	491e      	ldr	r1, [pc, #120]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4918      	ldr	r1, [pc, #96]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4914      	ldr	r1, [pc, #80]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d021      	beq.n	8001970 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e021      	b.n	800197e <HAL_GPIO_Init+0x2e2>
 800193a:	bf00      	nop
 800193c:	10320000 	.word	0x10320000
 8001940:	10310000 	.word	0x10310000
 8001944:	10220000 	.word	0x10220000
 8001948:	10210000 	.word	0x10210000
 800194c:	10120000 	.word	0x10120000
 8001950:	10110000 	.word	0x10110000
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40011000 	.word	0x40011000
 8001968:	40011400 	.word	0x40011400
 800196c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	43db      	mvns	r3, r3
 8001978:	4909      	ldr	r1, [pc, #36]	; (80019a0 <HAL_GPIO_Init+0x304>)
 800197a:	4013      	ands	r3, r2
 800197c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	3301      	adds	r3, #1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	f47f ae8e 	bne.w	80016b0 <HAL_GPIO_Init+0x14>
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	372c      	adds	r7, #44	; 0x2c
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e26c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8087 	beq.w	8001b02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f4:	4b92      	ldr	r3, [pc, #584]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d00c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a00:	4b8f      	ldr	r3, [pc, #572]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d06c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x12c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d168      	bne.n	8001b00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e246      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x76>
 8001a3c:	4b80      	ldr	r3, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a7f      	ldr	r2, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e02e      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x98>
 8001a52:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0xbc>
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a71      	ldr	r2, [pc, #452]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a90:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6a      	ldr	r2, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a67      	ldr	r2, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff faca 	bl	8001048 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fac6 	bl	8001048 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1fa      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe4>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fab6 	bl	8001048 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fab2 	bl	8001048 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1e6      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x10c>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d063      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d11c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
 8001b26:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e1ba      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4939      	ldr	r1, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e03a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fa6b 	bl	8001048 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b76:	f7ff fa67 	bl	8001048 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e19b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fa4a 	bl	8001048 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fa46 	bl	8001048 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e17a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d03a      	beq.n	8001c58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d019      	beq.n	8001c1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fa2a 	bl	8001048 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fa26 	bl	8001048 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e15a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f000 faa6 	bl	8002168 <RCC_Delay>
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff fa10 	bl	8001048 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fa0c 	bl	8001048 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d908      	bls.n	8001c4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e140      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	42420000 	.word	0x42420000
 8001c48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b9e      	ldr	r3, [pc, #632]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e9      	bne.n	8001c2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80a6 	beq.w	8001db2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b97      	ldr	r3, [pc, #604]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10d      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b94      	ldr	r3, [pc, #592]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a93      	ldr	r2, [pc, #588]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b91      	ldr	r3, [pc, #580]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b8e      	ldr	r3, [pc, #568]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a8a      	ldr	r2, [pc, #552]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff f9cd 	bl	8001048 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff f9c9 	bl	8001048 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0fd      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b81      	ldr	r3, [pc, #516]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x312>
 8001cd8:	4b7b      	ldr	r3, [pc, #492]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x334>
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a72      	ldr	r2, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	e01c      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x356>
 8001d10:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a6c      	ldr	r2, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a69      	ldr	r2, [pc, #420]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e00b      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a66      	ldr	r2, [pc, #408]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a63      	ldr	r2, [pc, #396]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f97d 	bl	8001048 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff f979 	bl	8001048 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0ab      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ee      	beq.n	8001d52 <HAL_RCC_OscConfig+0x37e>
 8001d74:	e014      	b.n	8001da0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff f967 	bl	8001048 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff f963 	bl	8001048 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e095      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a47      	ldr	r2, [pc, #284]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8081 	beq.w	8001ebe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbc:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d061      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d146      	bne.n	8001e5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_OscConfig+0x4fc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f937 	bl	8001048 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff f933 	bl	8001048 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e067      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d108      	bne.n	8001e18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	492d      	ldr	r1, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a19      	ldr	r1, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	4927      	ldr	r1, [pc, #156]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_OscConfig+0x4fc>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff f907 	bl	8001048 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f903 	bl	8001048 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e037      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46a>
 8001e5c:	e02f      	b.n	8001ebe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_RCC_OscConfig+0x4fc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff f8f0 	bl	8001048 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f8ec 	bl	8001048 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e020      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x498>
 8001e8a:	e018      	b.n	8001ebe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e013      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	42420060 	.word	0x42420060

08001ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0d0      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4965      	ldr	r1, [pc, #404]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b8      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a58      	ldr	r2, [pc, #352]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494d      	ldr	r1, [pc, #308]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d040      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d115      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e073      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06b      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4936      	ldr	r1, [pc, #216]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f840 	bl	8001048 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff f83c 	bl	8001048 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e053      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d210      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4922      	ldr	r1, [pc, #136]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e032      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4916      	ldr	r1, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490e      	ldr	r1, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f821 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	490a      	ldr	r1, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1cc>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe ff9e 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
 800209c:	08004468 	.word	0x08004468
 80020a0:	20000004 	.word	0x20000004
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b490      	push	{r4, r7}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020b0:	1d3c      	adds	r4, r7, #4
 80020b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b8:	f240 2301 	movw	r3, #513	; 0x201
 80020bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x40>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x46>
 80020e6:	e02d      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	e02d      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020fa:	4413      	add	r3, r2
 80020fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002100:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_GetSysClockFreq+0xb4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	0c5b      	lsrs	r3, r3, #17
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800211a:	4413      	add	r3, r2
 800211c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002120:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002126:	fb02 f203 	mul.w	r2, r2, r3
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e004      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	623b      	str	r3, [r7, #32]
      break;
 8002142:	e002      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002146:	623b      	str	r3, [r7, #32]
      break;
 8002148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214a:	6a3b      	ldr	r3, [r7, #32]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bc90      	pop	{r4, r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	08002964 	.word	0x08002964
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	003d0900 	.word	0x003d0900

08002168 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <RCC_Delay+0x34>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <RCC_Delay+0x38>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a5b      	lsrs	r3, r3, #9
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002184:	bf00      	nop
  }
  while (Delay --);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e5a      	subs	r2, r3, #1
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f9      	bne.n	8002184 <RCC_Delay+0x1c>
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20000004 	.word	0x20000004
 80021a0:	10624dd3 	.word	0x10624dd3

080021a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e076      	b.n	80022a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021c6:	d009      	beq.n	80021dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
 80021ce:	e005      	b.n	80021dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fdfa 	bl	8000df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002212:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	ea42 0103 	orr.w	r1, r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	0c1a      	lsrs	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f002 0204 	and.w	r2, r2, #4
 8002282:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002292:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_SPI_Transmit+0x22>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e126      	b.n	800251c <HAL_SPI_Transmit+0x270>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d6:	f7fe feb7 	bl	8001048 <HAL_GetTick>
 80022da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d002      	beq.n	80022f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022f0:	e10b      	b.n	800250a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_SPI_Transmit+0x52>
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002302:	e102      	b.n	800250a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2203      	movs	r2, #3
 8002308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234a:	d10f      	bne.n	800236c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800236a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b40      	cmp	r3, #64	; 0x40
 8002378:	d007      	beq.n	800238a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002392:	d14b      	bne.n	800242c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_SPI_Transmit+0xf6>
 800239c:	8afb      	ldrh	r3, [r7, #22]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d13e      	bne.n	8002420 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	881a      	ldrh	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	1c9a      	adds	r2, r3, #2
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023c6:	e02b      	b.n	8002420 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d112      	bne.n	80023fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	881a      	ldrh	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	1c9a      	adds	r2, r3, #2
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80023fa:	e011      	b.n	8002420 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fc:	f7fe fe24 	bl	8001048 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d803      	bhi.n	8002414 <HAL_SPI_Transmit+0x168>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d102      	bne.n	800241a <HAL_SPI_Transmit+0x16e>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800241e:	e074      	b.n	800250a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ce      	bne.n	80023c8 <HAL_SPI_Transmit+0x11c>
 800242a:	e04c      	b.n	80024c6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_SPI_Transmit+0x18e>
 8002434:	8afb      	ldrh	r3, [r7, #22]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d140      	bne.n	80024bc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	330c      	adds	r3, #12
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002460:	e02c      	b.n	80024bc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d113      	bne.n	8002498 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	86da      	strh	r2, [r3, #54]	; 0x36
 8002496:	e011      	b.n	80024bc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002498:	f7fe fdd6 	bl	8001048 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d803      	bhi.n	80024b0 <HAL_SPI_Transmit+0x204>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d102      	bne.n	80024b6 <HAL_SPI_Transmit+0x20a>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024ba:	e026      	b.n	800250a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1cd      	bne.n	8002462 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f9fc 	bl	80028c8 <SPI_EndRxTxTransaction>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	77fb      	strb	r3, [r7, #31]
 8002506:	e000      	b.n	800250a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002508:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800251a:	7ffb      	ldrb	r3, [r7, #31]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_SPI_Transmit_DMA+0x20>
 8002540:	2302      	movs	r3, #2
 8002542:	e09b      	b.n	800267c <HAL_SPI_Transmit_DMA+0x158>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d002      	beq.n	800255e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002558:	2302      	movs	r3, #2
 800255a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800255c:	e089      	b.n	8002672 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_SPI_Transmit_DMA+0x46>
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800256e:	e080      	b.n	8002672 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2203      	movs	r2, #3
 8002574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b6:	d10f      	bne.n	80025d8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_SPI_Transmit_DMA+0x160>)
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_SPI_Transmit_DMA+0x164>)
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <HAL_SPI_Transmit_DMA+0x168>)
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4619      	mov	r1, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002610:	f7fe feb0 	bl	8001374 <HAL_DMA_Start_IT>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002632:	e01e      	b.n	8002672 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d007      	beq.n	8002652 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0220 	orr.w	r2, r2, #32
 8002660:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0202 	orr.w	r2, r2, #2
 8002670:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0800275b 	.word	0x0800275b
 8002688:	080026b5 	.word	0x080026b5
 800268c:	08002777 	.word	0x08002777

08002690 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026c2:	f7fe fcc1 	bl	8001048 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d03b      	beq.n	800274e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0220 	bic.w	r2, r2, #32
 80026e4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0202 	bic.w	r2, r2, #2
 80026f4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	2164      	movs	r1, #100	; 0x64
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f000 f8e4 	bl	80028c8 <SPI_EndRxTxTransaction>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2200      	movs	r2, #0
 8002734:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ffab 	bl	80026a2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800274c:	e002      	b.n	8002754 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7fd fdba 	bl	80002c8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff ff91 	bl	8002690 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0203 	bic.w	r2, r2, #3
 8002792:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f043 0210 	orr.w	r2, r3, #16
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff ff7a 	bl	80026a2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027c8:	f7fe fc3e 	bl	8001048 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027d8:	f7fe fc36 	bl	8001048 <HAL_GetTick>
 80027dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	0d1b      	lsrs	r3, r3, #20
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ee:	e054      	b.n	800289a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f6:	d050      	beq.n	800289a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027f8:	f7fe fc26 	bl	8001048 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	429a      	cmp	r2, r3
 8002806:	d902      	bls.n	800280e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d13d      	bne.n	800288a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800281c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002826:	d111      	bne.n	800284c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002830:	d004      	beq.n	800283c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283a:	d107      	bne.n	800284c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800284a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002854:	d10f      	bne.n	8002876 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e017      	b.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3b01      	subs	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d19b      	bne.n	80027f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000004 	.word	0x20000004

080028c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff ff6a 	bl	80027b8 <SPI_WaitFlagStateUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e000      	b.n	80028fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <__libc_init_array>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	2600      	movs	r6, #0
 8002908:	4d0c      	ldr	r5, [pc, #48]	; (800293c <__libc_init_array+0x38>)
 800290a:	4c0d      	ldr	r4, [pc, #52]	; (8002940 <__libc_init_array+0x3c>)
 800290c:	1b64      	subs	r4, r4, r5
 800290e:	10a4      	asrs	r4, r4, #2
 8002910:	42a6      	cmp	r6, r4
 8002912:	d109      	bne.n	8002928 <__libc_init_array+0x24>
 8002914:	f000 f81a 	bl	800294c <_init>
 8002918:	2600      	movs	r6, #0
 800291a:	4d0a      	ldr	r5, [pc, #40]	; (8002944 <__libc_init_array+0x40>)
 800291c:	4c0a      	ldr	r4, [pc, #40]	; (8002948 <__libc_init_array+0x44>)
 800291e:	1b64      	subs	r4, r4, r5
 8002920:	10a4      	asrs	r4, r4, #2
 8002922:	42a6      	cmp	r6, r4
 8002924:	d105      	bne.n	8002932 <__libc_init_array+0x2e>
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	f855 3b04 	ldr.w	r3, [r5], #4
 800292c:	4798      	blx	r3
 800292e:	3601      	adds	r6, #1
 8002930:	e7ee      	b.n	8002910 <__libc_init_array+0xc>
 8002932:	f855 3b04 	ldr.w	r3, [r5], #4
 8002936:	4798      	blx	r3
 8002938:	3601      	adds	r6, #1
 800293a:	e7f2      	b.n	8002922 <__libc_init_array+0x1e>
 800293c:	08004478 	.word	0x08004478
 8002940:	08004478 	.word	0x08004478
 8002944:	08004478 	.word	0x08004478
 8002948:	0800447c 	.word	0x0800447c

0800294c <_init>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr

08002958 <_fini>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr
